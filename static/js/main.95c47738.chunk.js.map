{"version":3,"sources":["index.js"],"names":["popup","borderWidth","borderStyle","borderColor","background","popupBtns","display","justifyContent","flexDirection","input","marginTop","inputField","margin","fontSize","height","width","alignSelf","paddingLeft","inputForm","inputBtn","dataField","alignItems","deleteBtn","App","props","addingNewEntry","event","allPersons","state","personsList","setState","firstName","lastName","address","phoneNumber","id","nanoid","localStorage","setItem","JSON","stringify","preventDefault","getItem","parse","clicked","bind","deleteAllData","sortDataByFirstName","sortDataByLastName","sortDataByAddress","sortDataByPhoneNumber","this","clear","newPeoplesList","filter","person","index","dataType","value","updateData","map","detail","i","myList","concat","sort","a","b","style","trigger","modal","close","type","onChange","target","autoComplete","placeholder","onClick","e","changeData","deleteDataRow","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.95c47738.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Popup from \"reactjs-popup\";\nimport { nanoid } from \"nanoid\";\n\nconst popup = {\n  borderWidth: 2,\n  borderStyle: \"solid\",\n  borderColor: \"black\",\n  background: \"lavender\",\n};\nconst popupBtns = {\n  display: \"flex\",\n  justifyContent: \"center\",\n  flexDirection: \"row\",\n};\nconst input = {\n  marginTop: 80,\n  display: \"flex\",\n  justifyContent: \"center\",\n  flexDirection: \"column\",\n};\nconst inputField = {\n  margin: 20,\n  fontSize: 25,\n  height: 40,\n  width: 400,\n  alignSelf: \"center\",\n  paddingLeft: 10,\n};\nconst inputForm = {\n  fontSize: 20,\n};\nconst inputBtn = {\n  margin: 20,\n  fontSize: 30,\n  height: 60,\n  width: 250,\n};\n\nconst dataField = {\n  margin: 20,\n  fontSize: 25,\n  height: 40,\n  width: 300,\n  alignSelf: \"center\",\n  paddingLeft: 10,\n  borderWidth: 2,\n  borderStyle: \"solid\",\n  borderColor: \"black\",\n  background: \"FloralWhite\",\n};\n\nconst display = {\n  display: \"flex\",\n  flexDirection: \"column\",\n  alignItems: \"center\",\n};\n\nconst deleteBtn = {\n  margin: 20,\n  fontSize: 30,\n  height: 40,\n  width: 60,\n  borderWidth: 2,\n  borderStyle: \"solid\",\n  borderColor: \"black\",\n  background: \"LightCoral\",\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    let personsList = [];\n    if (localStorage.getItem(\"personsList\")) {\n      personsList = JSON.parse(localStorage.getItem(\"personsList\"));\n    }\n    this.state = {\n      personsList: personsList,\n      firstName: \"\",\n      lastName: \"\",\n      address: \"\",\n      phoneNumber: \"\",\n      clicked: false,\n    };\n\n    this.addingNewEntry = this.addingNewEntry.bind(this);\n    this.deleteAllData = this.deleteAllData.bind(this);\n    this.sortDataByFirstName = this.sortDataByFirstName.bind(this);\n    this.sortDataByLastName = this.sortDataByLastName.bind(this);\n    this.sortDataByAddress = this.sortDataByAddress.bind(this);\n    this.sortDataByPhoneNumber = this.sortDataByPhoneNumber.bind(this);\n  }\n\n  addingNewEntry = (event) => {\n    const allPersons = [...this.state.personsList];\n    this.setState(\n      {\n        personsList: [\n          {\n            firstName: this.state.firstName,\n            lastName: this.state.lastName,\n            address: this.state.address,\n            phoneNumber: this.state.phoneNumber,\n            id: nanoid(3),\n          },\n          ...allPersons,\n        ],\n        firstName: \"\",\n        lastName: \"\",\n        address: \"\",\n        phoneNumber: \"\",\n      },\n      () => {\n        localStorage.setItem(\n          \"personsList\",\n          JSON.stringify(this.state.personsList)\n        );\n      }\n    );\n    event.preventDefault();\n  };\n\n  deleteAllData() {\n    this.setState(\n      {\n        personsList: [],\n      },\n      () => {\n        localStorage.clear(\"personsList\");\n      }\n    );\n  }\n\n  deleteDataRow(id) {\n    const newPeoplesList = [...this.state.personsList].filter(\n      (person) => person.id !== id\n    );\n    this.setState(\n      {\n        personsList: [...newPeoplesList],\n      },\n      () => {\n        localStorage.setItem(\"personsList\", JSON.stringify(newPeoplesList));\n      }\n    );\n  }\n\n  changeData(index, dataType, value) {\n    const updateData = this.state.personsList.map((detail, i) => {\n      if (i === index) {\n        return { ...detail, [dataType]: value };\n      }\n      return detail;\n    });\n\n    this.setState(\n      {\n        personsList: updateData,\n      },\n      () => {\n        localStorage.setItem(\n          \"personsList\",\n          JSON.stringify(this.state.personsList)\n        );\n      }\n    );\n  }\n\n  sortDataByFirstName() {\n    const myList = []\n      .concat(this.state.personsList)\n      .sort((a, b) => (a.firstName > b.firstName ? 1 : -1));\n    this.setState({\n      personsList: [...myList],\n    });\n  }\n\n  sortDataByLastName() {\n    const myList = []\n      .concat(this.state.personsList)\n      .sort((a, b) => (a.lastName > b.lastName ? 1 : -1));\n    this.setState({\n      personsList: [...myList],\n    });\n  }\n\n  sortDataByAddress() {\n    const myList = []\n      .concat(this.state.personsList)\n      .sort((a, b) => (a.address > b.address ? 1 : -1));\n    this.setState({\n      personsList: [...myList],\n    });\n  }\n\n  sortDataByPhoneNumber() {\n    const myList = []\n      .concat(this.state.personsList)\n      .sort((a, b) => (a.phoneNumber > b.phoneNumber ? 1 : -1));\n    this.setState({\n      personsList: [...myList],\n    });\n  }\n\n  render() {\n    return (\n      <div style={display}>\n        <div>\n          <Popup trigger={<button style={inputBtn}>New Entry</button>} modal>\n            {(close) => (\n              <div style={popup}>\n                <div>\n                  <form style={input}>\n                    <input\n                      style={inputField}\n                      type=\"text\"\n                      value={this.state.firstName}\n                      onChange={(event) =>\n                        this.setState({ firstName: event.target.value })\n                      }\n                      autoComplete=\"off\"\n                      placeholder=\"Enter First Name\"\n                    ></input>\n                    <input\n                      style={inputField}\n                      type=\"text\"\n                      value={this.state.lastName}\n                      onChange={(event) =>\n                        this.setState({ lastName: event.target.value })\n                      }\n                      autoComplete=\"off\"\n                      placeholder=\"Enter Last Name\"\n                    ></input>\n                    <input\n                      style={inputField}\n                      type=\"text\"\n                      value={this.state.address}\n                      onChange={(event) =>\n                        this.setState({ address: event.target.value })\n                      }\n                      autoComplete=\"off\"\n                      placeholder=\"Enter Address\"\n                    ></input>\n                    <input\n                      style={inputField}\n                      type=\"text\"\n                      value={this.state.phoneNumber}\n                      onChange={(event) =>\n                        this.setState({ phoneNumber: event.target.value })\n                      }\n                      autoComplete=\"off\"\n                      placeholder=\"Enter Phone Number\"\n                    ></input>\n                    <div style={popupBtns}>\n                      <button style={inputBtn} onClick={this.addingNewEntry}>\n                        Submit\n                      </button>\n                      <button\n                        style={inputBtn}\n                        onClick={() => {\n                          close();\n                        }}\n                      >\n                        Close Window\n                      </button>\n                    </div>\n                  </form>\n                </div>\n              </div>\n            )}\n          </Popup>\n          <button style={inputBtn} onClick={this.deleteAllData}>\n            Clear All Data\n          </button>\n        </div>\n\n        <div style={inputForm}>\n          <form>\n            <table>\n              <thead>\n                <tr>\n                  <th>\n                    <button\n                      style={inputBtn}\n                      type=\"button\"\n                      onClick={this.sortDataByFirstName}\n                    >\n                      First Name\n                    </button>\n                  </th>\n                  <th>\n                    <button\n                      style={inputBtn}\n                      type=\"button\"\n                      onClick={this.sortDataByLastName}\n                    >\n                      Second Name\n                    </button>\n                  </th>\n                  <th>\n                    <button\n                      style={inputBtn}\n                      type=\"button\"\n                      onClick={this.sortDataByAddress}\n                    >\n                      Address\n                    </button>\n                  </th>\n                  <th>\n                    <button\n                      style={inputBtn}\n                      type=\"button\"\n                      onClick={this.sortDataByPhoneNumber}\n                    >\n                      Phone Number\n                    </button>\n                  </th>\n                </tr>\n              </thead>\n              {this.state.personsList.map((person, index) => {\n                return (\n                  <tbody>\n                    <tr key={person.id}>\n                      <td>\n                        <input\n                          style={dataField}\n                          onChange={(e) =>\n                            this.changeData(index, \"firstName\", e.target.value)\n                          }\n                          type=\"text\"\n                          placeholder=\"no data\"\n                          value={this.state.personsList[index].firstName}\n                        />\n                      </td>\n                      <td>\n                        <input\n                          style={dataField}\n                          onChange={(e) =>\n                            this.changeData(index, \"lastName\", e.target.value)\n                          }\n                          type=\"text\"\n                          placeholder=\"no data\"\n                          value={this.state.personsList[index].lastName}\n                        />\n                      </td>\n                      <td>\n                        <input\n                          style={dataField}\n                          onChange={(e) =>\n                            this.changeData(index, \"address\", e.target.value)\n                          }\n                          type=\"text\"\n                          placeholder=\"no data\"\n                          value={this.state.personsList[index].address}\n                        />\n                      </td>\n                      <td>\n                        <input\n                          style={dataField}\n                          onChange={(e) =>\n                            this.changeData(\n                              index,\n                              \"phoneNumber\",\n                              e.target.value\n                            )\n                          }\n                          type=\"text\"\n                          placeholder=\"no data\"\n                          value={this.state.personsList[index].phoneNumber}\n                        />\n                      </td>\n                      <td>\n                        <button\n                        style={deleteBtn}\n                          onClick={() => {\n                            this.deleteDataRow(person.id);\n                          }}\n                        >\n                          x\n                        </button>\n                      </td>\n                    </tr>\n                  </tbody>\n                );\n              })}\n            </table>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}
{"version":3,"sources":["index.js"],"names":["preFill","firstName","lastName","address","phoneNumber","id","popup","borderWidth","borderStyle","borderColor","background","popupBtns","display","justifyContent","flexDirection","input","marginTop","inputField","margin","fontSize","height","width","alignSelf","paddingLeft","inputForm","inputBtn","dataField","alignItems","deleteBtn","App","props","addingNewEntry","event","allPersons","state","personsList","setState","nanoid","localStorage","setItem","JSON","stringify","preventDefault","getItem","parse","clicked","bind","deleteAllData","sortDataByFirstName","sortDataByLastName","sortDataByAddress","sortDataByPhoneNumber","numberCheck","target","value","test","this","clear","newPeoplesList","filter","person","index","dataType","updateData","map","detail","i","myList","concat","sort","a","b","nameA","toLowerCase","nameB","surnameA","surnameB","addressA","addressB","numberA","numberB","style","trigger","modal","close","type","onChange","autoComplete","placeholder","onClick","e","changeData","deleteDataRow","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.831eea73.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Popup from \"reactjs-popup\";\nimport { nanoid } from \"nanoid\";\n\nconst preFill = [\n  {\n    firstName: \"Marko\",\n    lastName: \"Horvat\",\n    address: \"Ilica 87, 10000 Zagreb\",\n    phoneNumber: 123456789,\n    id: \"1a2\",\n  },\n  {\n    firstName: \"Kristina\",\n    lastName: \"Novoselec\",\n    address: \"Vukovarska 136, 10000 Zagreb\",\n    phoneNumber: 987654321,\n    id: \"2z1\",\n  },\n  {\n    firstName: \"Lorena\",\n    lastName: \"PavloviÄ‡\",\n    address: \"Zvonimirova 15, 21000 Split\",\n    phoneNumber: 543219876,\n    id: \"1z2\",\n  },\n];\nconst popup = {\n  borderWidth: 2,\n  borderStyle: \"solid\",\n  borderColor: \"black\",\n  background: \"lavender\",\n};\nconst popupBtns = {\n  display: \"flex\",\n  justifyContent: \"center\",\n  flexDirection: \"row\",\n};\nconst input = {\n  marginTop: 80,\n  display: \"flex\",\n  justifyContent: \"center\",\n  flexDirection: \"column\",\n};\nconst inputField = {\n  margin: 20,\n  fontSize: 25,\n  height: 40,\n  width: 400,\n  alignSelf: \"center\",\n  paddingLeft: 10,\n};\nconst inputForm = {\n  fontSize: 20,\n};\nconst inputBtn = {\n  margin: 20,\n  fontSize: 30,\n  height: 60,\n  width: 250,\n};\n\nconst dataField = {\n  margin: 20,\n  fontSize: 25,\n  height: 40,\n  width: 300,\n  alignSelf: \"center\",\n  paddingLeft: 10,\n  borderWidth: 2,\n  borderStyle: \"solid\",\n  borderColor: \"black\",\n  background: \"FloralWhite\",\n};\n\nconst display = {\n  display: \"flex\",\n  flexDirection: \"column\",\n  alignItems: \"center\",\n};\n\nconst deleteBtn = {\n  margin: 20,\n  fontSize: 30,\n  height: 40,\n  width: 60,\n  borderWidth: 2,\n  borderStyle: \"solid\",\n  borderColor: \"black\",\n  background: \"LightCoral\",\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    let personsList = [];\n    if (localStorage.getItem(\"personsList\") !== null) {\n      personsList = JSON.parse(localStorage.getItem(\"personsList\"));\n    } else {\n      personsList = preFill;\n    }\n    this.state = {\n      personsList: personsList,\n      firstName: \"\",\n      lastName: \"\",\n      address: \"\",\n      phoneNumber: \"\",\n      clicked: false,\n    };\n\n    this.addingNewEntry = this.addingNewEntry.bind(this);\n    this.deleteAllData = this.deleteAllData.bind(this);\n    this.sortDataByFirstName = this.sortDataByFirstName.bind(this);\n    this.sortDataByLastName = this.sortDataByLastName.bind(this);\n    this.sortDataByAddress = this.sortDataByAddress.bind(this);\n    this.sortDataByPhoneNumber = this.sortDataByPhoneNumber.bind(this);\n    this.numberCheck = this.numberCheck.bind(this);\n  }\n\n  numberCheck(event) {\n    const phoneNumber = event.target.value;\n    const regex = /([0-9-+/\\b])+$/;\n    if (event.target.value === \"\" || regex.test(event.target.value)) {\n      this.setState({ phoneNumber: phoneNumber });\n    }\n  }\n\n  addingNewEntry = (event) => {\n    const allPersons = [...this.state.personsList];\n    if (\n      this.state.firstName === \"\" &&\n      this.state.lastName === \"\" &&\n      this.state.address === \"\" &&\n      this.state.phoneNumber === \"\"\n    ) {\n      this.setState({\n        personsList: allPersons,\n      });\n    } else {\n      this.setState(\n        {\n          personsList: [\n            {\n              firstName: this.state.firstName,\n              lastName: this.state.lastName,\n              address: this.state.address,\n              phoneNumber: this.state.phoneNumber,\n              id: nanoid(3),\n            },\n            ...allPersons,\n          ],\n          firstName: \"\",\n          lastName: \"\",\n          address: \"\",\n          phoneNumber: \"\",\n        },\n        () => {\n          localStorage.setItem(\n            \"personsList\",\n            JSON.stringify(this.state.personsList)\n          );\n        }\n      );\n    }\n    event.preventDefault();\n  };\n\n  deleteAllData() {\n    this.setState(\n      {\n        personsList: [],\n      },\n      () => {\n        localStorage.clear(\"personsList\");\n      }\n    );\n  }\n\n  deleteDataRow(id) {\n    const newPeoplesList = [...this.state.personsList].filter(\n      (person) => person.id !== id\n    );\n    this.setState(\n      {\n        personsList: [...newPeoplesList],\n      },\n      () => {\n        localStorage.setItem(\"personsList\", JSON.stringify(newPeoplesList));\n      }\n    );\n  }\n\n  changeData(index, dataType, value) {\n    const updateData = this.state.personsList.map((detail, i) => {\n      if (i === index) {\n        return { ...detail, [dataType]: value };\n      }\n      return detail;\n    });\n\n    this.setState(\n      {\n        personsList: updateData,\n      },\n      () => {\n        localStorage.setItem(\n          \"personsList\",\n          JSON.stringify(this.state.personsList)\n        );\n      }\n    );\n  }\n\n  sortDataByFirstName() {\n    const myList = [].concat(this.state.personsList).sort((a, b) => {\n      const nameA = a.firstName.toLowerCase();\n      const nameB = b.firstName.toLowerCase();\n      if (nameA < nameB) {\n        return -1;\n      }\n      if (nameA > nameB) {\n        return 1;\n      }\n      return 0;\n    });\n    this.setState({\n      personsList: [...myList],\n    });\n  }\n\n  sortDataByLastName() {\n    const myList = [].concat(this.state.personsList).sort((a, b) => {\n      const surnameA = a.lastName.toLowerCase();\n      const surnameB = b.lastName.toLowerCase();\n      if (surnameA < surnameB) {\n        return -1;\n      }\n      if (surnameA > surnameB) {\n        return 1;\n      }\n      return 0;\n    });\n    this.setState({\n      personsList: [...myList],\n    });\n  }\n\n  sortDataByAddress() {\n    const myList = [].concat(this.state.personsList).sort((a, b) => {\n      const addressA = a.address.toLowerCase();\n      const addressB = b.address.toLowerCase();\n      if (addressA < addressB) {\n        return -1;\n      }\n      if (addressA > addressB) {\n        return 1;\n      }\n      return 0;\n    });\n    this.setState({\n      personsList: [...myList],\n    });\n  }\n\n  sortDataByPhoneNumber() {\n    const myList = [].concat(this.state.personsList).sort((a, b) => {\n      const numberA = a.phoneNumber;\n      const numberB = b.phoneNumber;\n      if (numberA < numberB) {\n        return -1;\n      }\n      if (numberA < numberB) {\n        return 1;\n      }\n      return 0;\n    });\n    this.setState({\n      personsList: [...myList],\n    });\n  }\n\n  render() {\n    return (\n      <div style={display}>\n        <div>\n          <Popup trigger={<button style={inputBtn}>New Entry</button>} modal>\n            {(close) => (\n              <div style={popup}>\n                <div>\n                  <form style={input}>\n                    <input\n                      style={inputField}\n                      type=\"text\"\n                      value={this.state.firstName}\n                      onChange={(event) =>\n                        this.setState({ firstName: event.target.value })\n                      }\n                      autoComplete=\"off\"\n                      placeholder=\"Enter First Name\"\n                    ></input>\n                    <input\n                      style={inputField}\n                      type=\"text\"\n                      value={this.state.lastName}\n                      onChange={(event) =>\n                        this.setState({ lastName: event.target.value })\n                      }\n                      autoComplete=\"off\"\n                      placeholder=\"Enter Last Name\"\n                    ></input>\n                    <input\n                      style={inputField}\n                      type=\"text\"\n                      value={this.state.address}\n                      onChange={(event) =>\n                        this.setState({ address: event.target.value })\n                      }\n                      autoComplete=\"off\"\n                      placeholder=\"Enter Address\"\n                    ></input>\n                    <input\n                      style={inputField}\n                      type=\"text\"\n                      value={this.state.phoneNumber}\n                      onChange={this.numberCheck}\n                      autoComplete=\"off\"\n                      placeholder=\"Enter Phone Number\"\n                    ></input>\n                    <div style={popupBtns}>\n                      <button style={inputBtn} onClick={this.addingNewEntry}>\n                        Submit\n                      </button>\n                      <button\n                        style={inputBtn}\n                        onClick={() => {\n                          close();\n                        }}\n                      >\n                        Close Window\n                      </button>\n                    </div>\n                  </form>\n                </div>\n              </div>\n            )}\n          </Popup>\n          <button style={inputBtn} onClick={this.deleteAllData}>\n            Clear All Data\n          </button>\n        </div>\n\n        <div style={inputForm}>\n          <form>\n            <table>\n              <thead>\n                <tr>\n                  <th>\n                    <button\n                      style={inputBtn}\n                      type=\"button\"\n                      onClick={this.sortDataByFirstName}\n                    >\n                      First Name\n                    </button>\n                  </th>\n                  <th>\n                    <button\n                      style={inputBtn}\n                      type=\"button\"\n                      onClick={this.sortDataByLastName}\n                    >\n                      Second Name\n                    </button>\n                  </th>\n                  <th>\n                    <button\n                      style={inputBtn}\n                      type=\"button\"\n                      onClick={this.sortDataByAddress}\n                    >\n                      Address\n                    </button>\n                  </th>\n                  <th>\n                    <button\n                      style={inputBtn}\n                      type=\"button\"\n                      onClick={this.sortDataByPhoneNumber}\n                    >\n                      Phone Number\n                    </button>\n                  </th>\n                </tr>\n              </thead>\n              {this.state.personsList.map((person, index) => {\n                return (\n                  <tbody key={person.id}>\n                    <tr>\n                      <td>\n                        <input\n                          style={dataField}\n                          onChange={(e) =>\n                            this.changeData(index, \"firstName\", e.target.value)\n                          }\n                          type=\"text\"\n                          placeholder=\"no data\"\n                          value={this.state.personsList[index].firstName}\n                        />\n                      </td>\n                      <td>\n                        <input\n                          style={dataField}\n                          onChange={(e) =>\n                            this.changeData(index, \"lastName\", e.target.value)\n                          }\n                          type=\"text\"\n                          placeholder=\"no data\"\n                          value={this.state.personsList[index].lastName}\n                        />\n                      </td>\n                      <td>\n                        <input\n                          style={dataField}\n                          onChange={(e) =>\n                            this.changeData(index, \"address\", e.target.value)\n                          }\n                          type=\"text\"\n                          placeholder=\"no data\"\n                          value={this.state.personsList[index].address}\n                        />\n                      </td>\n                      <td>\n                        <input\n                          style={dataField}\n                          onChange={(e) =>\n                            this.changeData(\n                              index,\n                              \"phoneNumber\",\n                              e.target.value\n                            )\n                          }\n                          type=\"text\"\n                          placeholder=\"no data\"\n                          value={this.state.personsList[index].phoneNumber}\n                        />\n                      </td>\n                      <td>\n                        <button\n                          style={deleteBtn}\n                          onClick={() => {\n                            this.deleteDataRow(person.id);\n                          }}\n                        >\n                          x\n                        </button>\n                      </td>\n                    </tr>\n                  </tbody>\n                );\n              })}\n            </table>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}
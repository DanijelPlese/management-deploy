{"version":3,"sources":["refresh.svg","index.js"],"names":["preFill","firstName","lastName","address","phoneNumber","id","nanoid","popup","borderWidth","borderStyle","borderColor","background","popupBtns","display","justifyContent","flexDirection","input","marginTop","inputField","margin","fontSize","height","width","alignSelf","paddingLeft","inputForm","inputBtn","dataField","alignItems","utillity","deleteBtn","icon","App","props","addNewPersonToList","event","allPersons","state","peopleList","setState","localStorage","setItem","JSON","stringify","preventDefault","getItem","parse","search","bind","deleteAllData","allowNumberInput","dataSearch","sortPeopleData","target","value","test","this","clear","newPeopleList","filter","person","dataType","updateData","map","i","column","sortDirection","sortedList","concat","sort","a","b","nameA","toString","toUpperCase","nameB","filteredPeople","toLowerCase","indexOf","style","trigger","modal","close","type","onChange","autoComplete","placeholder","onClick","refreshState","src","refresh","alt","e","updatePersonData","deleteDataRow","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.28d114af.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/refresh.d54e54e0.svg\";","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Popup from \"reactjs-popup\";\nimport { nanoid } from \"nanoid\";\nimport refresh from \"./refresh.svg\";\n\nconst preFill = [\n  {\n    firstName: \"Marko\",\n    lastName: \"Horvat\",\n    address: \"Ilica 87, 10000 Zagreb\",\n    phoneNumber: 123456789,\n    id: nanoid(3),\n  },\n  {\n    firstName: \"Kristina\",\n    lastName: \"Novoselec\",\n    address: \"Vukovarska 136, 10000 Zagreb\",\n    phoneNumber: 987654321,\n    id: nanoid(3),\n  },\n  {\n    firstName: \"Lorena\",\n    lastName: \"PavloviÄ‡\",\n    address: \"Zvonimirova 15, 21000 Split\",\n    phoneNumber: 543219876,\n    id: nanoid(3),\n  },\n];\nconst popup = {\n  borderWidth: 2,\n  borderStyle: \"solid\",\n  borderColor: \"black\",\n  background: \"lavender\",\n};\nconst popupBtns = {\n  display: \"flex\",\n  justifyContent: \"center\",\n  flexDirection: \"row\",\n};\nconst input = {\n  marginTop: 80,\n  display: \"flex\",\n  justifyContent: \"center\",\n  flexDirection: \"column\",\n};\nconst inputField = {\n  margin: 20,\n  fontSize: 25,\n  height: 40,\n  width: 400,\n  alignSelf: \"center\",\n  paddingLeft: 10,\n};\nconst inputForm = {\n  fontSize: 20,\n};\nconst inputBtn = {\n  margin: 20,\n  fontSize: 30,\n  height: 60,\n  width: 250,\n};\nconst dataField = {\n  margin: 20,\n  fontSize: 25,\n  height: 40,\n  width: 300,\n  alignSelf: \"center\",\n  paddingLeft: 10,\n  borderWidth: 2,\n  borderStyle: \"solid\",\n  borderColor: \"black\",\n  background: \"FloralWhite\",\n};\nconst display = {\n  display: \"flex\",\n  flexDirection: \"column\",\n  alignItems: \"center\",\n};\nconst utillity = {\n  display: \"flex\",\n  flexDirection: \"row\",\n  alignItems: \"center\",\n};\nconst deleteBtn = {\n  margin: 20,\n  fontSize: 30,\n  height: 40,\n  width: 40,\n  borderWidth: 2,\n  borderStyle: \"solid\",\n  borderColor: \"black\",\n  background: \"LightCoral\",\n};\nconst icon = {\n  width: 30,\n  height: 30,\n  background: \"LightCoral\",\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    let peopleList = [];\n    if (localStorage.getItem(\"peopleList\") !== null) {\n      peopleList = JSON.parse(localStorage.getItem(\"peopleList\"));\n    } else {\n      peopleList = preFill;\n    }\n    this.state = {\n      peopleList: peopleList,\n      firstName: \"\",\n      lastName: \"\",\n      address: \"\",\n      phoneNumber: \"\",\n      search: \"\",\n    };\n\n    this.addNewPersonToList = this.addNewPersonToList.bind(this);\n    this.deleteAllData = this.deleteAllData.bind(this);\n    this.allowNumberInput = this.allowNumberInput.bind(this);\n    this.dataSearch = this.dataSearch.bind(this);\n    this.sortPeopleData = this.sortPeopleData.bind(this);\n  }\n  // prevent letters in phone number input\n  allowNumberInput(event) {\n    const phoneNumber = event.target.value;\n    const regex = /([0-9-+/\\b])+$/;\n    if (event.target.value === \"\" || regex.test(event.target.value)) {\n      this.setState({ phoneNumber: phoneNumber });\n    }\n  }\n  // adds new person data to list and store it localy\n  // one data field must be filled with data to be able to save and store new person\n  addNewPersonToList = (event) => {\n    const allPersons = [...this.state.peopleList];\n    if (\n      this.state.firstName === \"\" &&\n      this.state.lastName === \"\" &&\n      this.state.address === \"\" &&\n      this.state.phoneNumber === \"\"\n    ) {\n      this.setState({\n        peopleList: allPersons,\n      });\n    } else {\n      this.setState(\n        {\n          peopleList: [\n            {\n              firstName: this.state.firstName,\n              lastName: this.state.lastName,\n              address: this.state.address,\n              phoneNumber: this.state.phoneNumber,\n              id: nanoid(3),\n            },\n            ...allPersons,\n          ],\n          firstName: \"\",\n          lastName: \"\",\n          address: \"\",\n          phoneNumber: \"\",\n        },\n        () => {\n          localStorage.setItem(\n            \"peopleList\",\n            JSON.stringify(this.state.peopleList)\n          );\n        }\n      );\n    }\n    event.preventDefault();\n  };\n  // deletes all objects from array of persons and save to local storage new array\n  deleteAllData() {\n    this.setState(\n      {\n        peopleList: [],\n      },\n      () => {\n        localStorage.clear(\"peopleList\");\n      }\n    );\n  }\n  // delete specific person entry and save new list to local storage\n  deleteDataRow(id) {\n    const newPeopleList = [...this.state.peopleList].filter(\n      (person) => person.id !== id\n    );\n    this.setState(\n      {\n        peopleList: [...newPeopleList],\n      },\n      () => {\n        localStorage.setItem(\"peopleList\", JSON.stringify(newPeopleList));\n      }\n    );\n  }\n  // edit any data in array and save it localy\n  updatePersonData(person, dataType, value) {\n    const updateData = this.state.peopleList.map((i) =>\n      i.id === person.id\n        ? {\n            ...i,\n            [dataType]: value,\n          }\n        : i\n    );\n    this.setState(\n      {\n        peopleList: updateData,\n      },\n      () => {\n        localStorage.setItem(\n          \"peopleList\",\n          JSON.stringify(this.state.peopleList)\n        );\n      }\n    );\n  }\n  // sort alphanumerically all data in array by whatever column is clicked\n  sortPeopleData(event) {\n    const column = event.target.value;\n    if (this.state.sortDirection === \"ascending\") {\n      const sortedList = [].concat(this.state.peopleList).sort((a, b) => {\n        const nameA = a[column].toString().toUpperCase();\n        const nameB = b[column].toString().toUpperCase();\n        if (nameA > nameB) {\n          return -1;\n        }\n        if (nameA < nameB) {\n          return 1;\n        }\n        return 0;\n      });\n      this.setState({\n        sortDirection: \"descending\",\n        peopleList: [...sortedList],\n      });\n    } else {\n      const sortedList = [].concat(this.state.peopleList).sort((a, b) => {\n        const nameA = a[column].toString().toUpperCase();\n        const nameB = b[column].toString().toUpperCase();\n        if (nameA < nameB) {\n          return -1;\n        }\n        if (nameA > nameB) {\n          return 1;\n        }\n        return 0;\n      });\n      this.setState({\n        sortDirection: \"ascending\",\n        peopleList: [...sortedList],\n      });\n    }\n  }\n  // serach for data containing provided string in search field and return only those data that contain that string\n  dataSearch(event) {\n    this.setState({\n      search: event.target.value,\n    });\n  }\n  // bring all stored data back to our page after filtering\n  refreshState() {\n    this.setState({\n      ...this.state.peopleList,\n      search: \"\",\n    });\n  }\n\n  render() {\n    const filteredPeople = this.state.peopleList.filter((person) => {\n      return (\n        person.firstName\n          .toLowerCase()\n          .indexOf(this.state.search.toLowerCase()) !== -1 ||\n        person.lastName\n          .toLowerCase()\n          .indexOf(this.state.search.toLowerCase()) !== -1\n      );\n    });\n    return (\n      <div style={display}>\n        <div style={utillity}>\n          <Popup trigger={<button style={inputBtn}>New Entry</button>} modal>\n            {(close) => (\n              <div style={popup}>\n                <div>\n                  <form style={input}>\n                    <input\n                      style={inputField}\n                      type=\"text\"\n                      value={this.state.firstName}\n                      onChange={(event) =>\n                        this.setState({ firstName: event.target.value })\n                      }\n                      autoComplete=\"off\"\n                      placeholder=\"Enter First Name\"\n                    ></input>\n                    <input\n                      style={inputField}\n                      type=\"text\"\n                      value={this.state.lastName}\n                      onChange={(event) =>\n                        this.setState({ lastName: event.target.value })\n                      }\n                      autoComplete=\"off\"\n                      placeholder=\"Enter Last Name\"\n                    ></input>\n                    <input\n                      style={inputField}\n                      type=\"text\"\n                      value={this.state.address}\n                      onChange={(event) =>\n                        this.setState({ address: event.target.value })\n                      }\n                      autoComplete=\"off\"\n                      placeholder=\"Enter Address\"\n                    ></input>\n                    <input\n                      style={inputField}\n                      type=\"text\"\n                      value={this.state.phoneNumber}\n                      onChange={this.allowNumberInput}\n                      autoComplete=\"off\"\n                      placeholder=\"Enter Phone Number\"\n                    ></input>\n                    <div style={popupBtns}>\n                      <button\n                        style={inputBtn}\n                        onClick={this.addNewPersonToList}\n                      >\n                        Submit\n                      </button>\n                      <button\n                        style={inputBtn}\n                        onClick={() => {\n                          close();\n                        }}\n                      >\n                        Close Window\n                      </button>\n                    </div>\n                  </form>\n                </div>\n              </div>\n            )}\n          </Popup>\n          <button style={inputBtn} onClick={this.deleteAllData}>\n            Clear All Data\n          </button>\n          <input\n            style={dataField}\n            type=\"text\"\n            id=\"filter\"\n            placeholder=\"Search for...\"\n            onChange={this.dataSearch}\n            value={this.state.search}\n            autoComplete=\"off\"\n          />\n          <button style={deleteBtn} onClick={this.refreshState.bind(this)}>\n            <img style={icon} src={refresh} alt=\"refresh\" />\n          </button>\n        </div>\n\n        <div style={inputForm}>\n          <form>\n            <table>\n              <thead>\n                <tr>\n                  <th>\n                    <button\n                      style={inputBtn}\n                      type=\"button\"\n                      onClick={this.sortPeopleData}\n                      value={\"firstName\"}\n                    >\n                      First Name\n                    </button>\n                  </th>\n                  <th>\n                    <button\n                      style={inputBtn}\n                      type=\"button\"\n                      onClick={this.sortPeopleData}\n                      value={\"lastName\"}\n                    >\n                      Second Name\n                    </button>\n                  </th>\n                  <th>\n                    <button\n                      style={inputBtn}\n                      type=\"button\"\n                      onClick={this.sortPeopleData}\n                      value={\"address\"}\n                    >\n                      Address\n                    </button>\n                  </th>\n                  <th>\n                    <button\n                      style={inputBtn}\n                      type=\"button\"\n                      onClick={this.sortPeopleData}\n                      value={\"phoneNumber\"}\n                    >\n                      Phone Number\n                    </button>\n                  </th>\n                </tr>\n              </thead>\n              {filteredPeople.map((person) => {\n                return (\n                  <tbody key={person.id}>\n                    <tr>\n                      <td>\n                        <input\n                          style={dataField}\n                          onChange={(e) =>\n                            this.updatePersonData(\n                              person,\n                              \"firstName\",\n                              e.target.value\n                            )\n                          }\n                          type=\"text\"\n                          placeholder=\"no data\"\n                          value={person.firstName}\n                        />\n                      </td>\n                      <td>\n                        <input\n                          style={dataField}\n                          onChange={(e) =>\n                            this.updatePersonData(\n                              person,\n                              \"lastName\",\n                              e.target.value\n                            )\n                          }\n                          type=\"text\"\n                          placeholder=\"no data\"\n                          value={person.lastName}\n                        />\n                      </td>\n                      <td>\n                        <input\n                          style={dataField}\n                          onChange={(e) =>\n                            this.updatePersonData(\n                              person,\n                              \"address\",\n                              e.target.value\n                            )\n                          }\n                          type=\"text\"\n                          placeholder=\"no data\"\n                          value={person.address}\n                        />\n                      </td>\n                      <td>\n                        <input\n                          style={dataField}\n                          onChange={(e) =>\n                            this.updatePersonData(\n                              person,\n                              \"phoneNumber\",\n                              e.target.value\n                            )\n                          }\n                          type=\"text\"\n                          placeholder=\"no data\"\n                          value={person.phoneNumber}\n                        />\n                      </td>\n                      <td>\n                        <button\n                          style={deleteBtn}\n                          onClick={() => {\n                            this.deleteDataRow(person.id);\n                          }}\n                        >\n                          x\n                        </button>\n                      </td>\n                    </tr>\n                  </tbody>\n                );\n              })}\n            </table>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}